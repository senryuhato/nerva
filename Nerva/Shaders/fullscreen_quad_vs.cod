//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    dcl_texcoord v0  // position<0,1,2,3>
    dcl_texcoord1 v1  // texcoord<0,1>

#line 6 "C:\Users\2190047\Desktop\MyLibray\New\Nerva\NervaLib\fullscreen_quad_vs.hlsl"
    mov r0, v0  // ::vout<0,1,2,3>
    mov r1.xy, v1  // ::vout<4,5>
    mov r0.xy, r0  // ::main<0,1>
    mov r0.zw, r0  // ::main<2,3>
    mov oT0.xy, r1  // ::main<4,5>

#line 3
    mul r1.xy, r0.w, c0
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r0  // ::main<2,3>

// approximately 8 instruction slots used
vs_4_0
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- texcoord.x; v1.y <- texcoord.y; 
//   o1.x <- <main return value>.texcoord.x; o1.y <- <main return value>.texcoord.y; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 6 "C:\Users\2190047\Desktop\MyLibray\New\Nerva\NervaLib\fullscreen_quad_vs.hlsl"
mov r0.xyzw, v0.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 8
mov r1.xy, v1.xyxx  // r1.x <- vout.texcoord.x; r1.y <- vout.texcoord.y

#line 10
mov o0.xyzw, r0.xyzw
mov o1.xy, r1.xyxx
ret 
// Approximately 5 instruction slots used
